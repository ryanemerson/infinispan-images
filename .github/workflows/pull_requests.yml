name: Test

on:
  push:
    branches:
      - 14.0.x
      - main
  pull_request:
    branches:
      - 14.0.x
      - main

concurrency:
  group: ${{ github.head_ref || github.ref_name }} 
  cancel-in-progress: true


jobs:
  images:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        descriptor: [server-openjdk, server-native, cli]
        os: [ubuntu-latest, macos-14]

    env:
      IMAGE: ${{ matrix.descriptor == 'server-openjdk' && 'server' || matrix.descriptor }}
      ARCH: ${{ matrix.os == 'ubuntu-latest' && 'amd64' || 'arm64' }}

    steps:
    - uses: actions/checkout@v4

    - name: Install CEKit
      uses: cekit/actions-setup-cekit@v1.1.5

    - name: Define Env
      run: |
        echo "TAG=${{ env.ARCH }}-latest" >> $GITHUB_ENV
        echo "TAR=/tmp/${{ matrix.descriptor }}-${{ env.ARCH }}.tar" >> $GITHUB_ENV

    - name: Create dockerfile
      run: |
        cekit -v --descriptor ${{ matrix.descriptor }}.yaml build --overrides "{\"version\": \"$TAG\"}" --dry-run docker

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Build
      uses: docker/build-push-action@v3
      with:
        context: ./target/image
        platforms: linux/${{ env.ARCH }}
        file: target/image/Dockerfile
        tags: infinispan/${{ env.IMAGE }}:${{ env.TAG }}
        outputs: type=docker,dest=${{ env.TAR }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.descriptor }}-${{ env.ARCH }}
        path: ${{ env.TAR }}

  manifests:
    needs: images
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    strategy:
      fail-fast: false
      matrix:
        descriptor: [server-openjdk, server-native, cli]
        os: [ubuntu-latest, macos-14]

    env:
      IMAGE: ${{ matrix.descriptor == 'server-openjdk' && 'server' || matrix.descriptor }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Component Images
        uses: actions/download-artifact@v4
        with:
          path: .
          pattern: "*"
          merge-multiple: true

      - name: Load images
        run: |
          ARCHS=("arm64 amd64")
          for ARCH in ${ARCHS[@]}; do
            IMG=infinispan/${IMAGE}:${ARCH}-latest
            docker load --input ${IMAGE}-arm64.tar
            docker tag ${IMG} localhost:5000/${IMG}
            docker push localhost:5000/${IMG}
          done

      - name: Create manifest
        run: |
          IMG=localhost:5000/infinispan/${IMAGE}:${{ matrix.descriptor }}
          docker manifest create --insecure ${IMG} \
            localhost:5000/infinispan/${IMAGE}:amd64-latest \
            localhost:5000/infinispan/${IMAGE}:arm64-latest
          
          docker manifest inspect --verbose ${IMG}
          docker tag ${IMG} quay.io/infinispan-test/${IMAGE}:${{ matrix.descriptor }}

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Push
        run: docker manifest push quay.io/infinispan-test/${IMAGE}:${{ matrix.descriptor }}
